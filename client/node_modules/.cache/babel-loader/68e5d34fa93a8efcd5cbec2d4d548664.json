{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/claudialay/Desktop/Mthree Projects/trivia-game/client/src/components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Container, Col, Card, CardGroup, Row } from \"react-bootstrap\";\nimport { generateQuiz } from \"../utils/API\";\nexport default function Quiz() {\n  _s();\n\n  const [quizData, setQuizData] = useState([]);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // removed await\n      await generateQuiz().then(response => response.json()).then(data => setQuizData(data.results)); // setQuizData(JSON.parse(quizData.replace(/&quot;/g,'\"')));\n      // var stringified = JSON.stringify(quizData);\n      // console.log('stringified', stringified)\n      // stringified = stringified.replace(/&quot;/g, '\"');\n      // quizData = JSON.parse(stringified);\n      // setQuizData(JSON.parse(stringified));\n      // var data = $('<div>').html('[{&quot;Id&quot;:1,&quot;Name&quot;:&quot;Name}]')[0].textContent;\n\n      console.log('quiz', quiz); //   console.log('results', results)\n      //   if (!response.ok) {\n      //     throw new Error(\"something went wrong!\");\n      //   }\n      // quizData.map(quiz) => ({\n      //     question: quiz.question,\n      //     right: quiz.correct,\n      //     wrong: quiz.wrong\n      // });\n      //   setQuizData(\n      //     resultData.map((quiz) => ({\n      //       question: quiz.question,\n      //       right: quiz.correct,\n      //       wrong: quiz.wrong,\n      //     }))\n      //   );\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFormSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), quizData.map(quiz => {\n      return /*#__PURE__*/_jsxDEV(CardGroup, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              border: \"dark\",\n              children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                  className: \"text-center card-title\",\n                  children: [quiz.question, console.log(\"test\")]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                  children: [quiz.correct_answer, quiz.incorrect_answers[0]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Quiz, \"95kM5RrwhwRbhJzHPvK32xDV28A=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/claudialay/Desktop/Mthree Projects/trivia-game/client/src/components/Quiz.js"],"names":["React","useState","Container","Col","Card","CardGroup","Row","generateQuiz","Quiz","quizData","setQuizData","handleFormSubmit","event","preventDefault","then","response","json","data","results","console","log","quiz","error","map","question","correct_answer","incorrect_answers"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,GAA1C,QAAqD,iBAArD;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMU,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;AACtCA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI;AACA;AACA,YAAMN,YAAY,GACjBO,IADK,CACCC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADd,EAELF,IAFK,CAECG,IAAD,IAAUP,WAAW,CAACO,IAAI,CAACC,OAAN,CAFrB,CAAN,CAFA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,IAApB,EAdA,CAgBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAlCD,CAkCE,OAAOC,KAAP,EAAc;AACZH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACH;AACJ,GAxCD;;AA0CA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEX,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,QAAQ,CAACc,GAAT,CAAcF,IAAD,IAAU;AACtB,0BACE,QAAC,SAAD;AAAA,+BACE,QAAC,GAAD;AAAA,iCACE,QAAC,GAAD;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,MAAM,EAAC,MAAb;AAAA,qCACE,QAAC,IAAD,CAAM,IAAN;AAAA,wCACE,QAAC,IAAD,CAAM,KAAN;AAAY,kBAAA,SAAS,EAAC,wBAAtB;AAAA,6BACGA,IAAI,CAACG,QADR,EAEGL,OAAO,CAACC,GAAR,CAAY,MAAZ,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAME,QAAC,IAAD,CAAM,IAAN;AAAA,6BACGC,IAAI,CAACI,cADR,EAEGJ,IAAI,CAACK,iBAAL,CAAuB,CAAvB,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAqBD,KAtBA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BH;;GAzEuBlB,I;;KAAAA,I","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Col, Card, CardGroup, Row } from \"react-bootstrap\";\nimport { generateQuiz } from \"../utils/API\";\n\nexport default function Quiz() {\n    const [quizData, setQuizData] = useState([]);\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            // removed await\n            await generateQuiz()\n            .then((response) => response.json())\n            .then((data) => setQuizData(data.results));\n            \n            // setQuizData(JSON.parse(quizData.replace(/&quot;/g,'\"')));\n            // var stringified = JSON.stringify(quizData);\n            // console.log('stringified', stringified)\n            // stringified = stringified.replace(/&quot;/g, '\"');\n            // quizData = JSON.parse(stringified);\n            // setQuizData(JSON.parse(stringified));\n            // var data = $('<div>').html('[{&quot;Id&quot;:1,&quot;Name&quot;:&quot;Name}]')[0].textContent;\n\n            console.log('quiz', quiz)\n            \n            //   console.log('results', results)\n            //   if (!response.ok) {\n            //     throw new Error(\"something went wrong!\");\n            //   }\n\n            // quizData.map(quiz) => ({\n            //     question: quiz.question,\n            //     right: quiz.correct,\n            //     wrong: quiz.wrong\n            // });\n            \n            //   setQuizData(\n            //     resultData.map((quiz) => ({\n            //       question: quiz.question,\n            //       right: quiz.correct,\n            //       wrong: quiz.wrong,\n            //     }))\n            //   );\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return (\n      <Container>\n        <button onClick={handleFormSubmit}>Submit</button>\n        {quizData.map((quiz) => {\n          return (\n            <CardGroup>\n              <Row>\n                <Col>\n                  <Card border=\"dark\">\n                    <Card.Body>\n                      <Card.Title className=\"text-center card-title\">\n                        {quiz.question}\n                        {console.log(\"test\")}\n                      </Card.Title>\n\n                      <Card.Text>\n                        {quiz.correct_answer}\n                        {quiz.incorrect_answers[0]}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              </Row>\n            </CardGroup>\n          );\n        })}\n      </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}